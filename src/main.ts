//
//  Spotify History Logger
//
//  Add every listened track to a playlist for the current month.
//

import SpotifyWebApi from "spotify-web-api-node";
import SpotifyWatcher from "./lib.js";

const clientId = process.env.SPOTIFY_CLIENT_ID;
const clientSecret = process.env.SPOTIFY_CLIENT_SECRET;
const watcher = new SpotifyWatcher(clientId, clientSecret);

const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

const currentMonth = () => {
  const now = new Date();
  return `${months[now.getMonth()]} ${now.getFullYear()}`;
};

const getCurrentPlaylist = async (api) => {
  const name = currentMonth();
  let response = null,
    offset = 0;

  do {
    console.log("getUserPlaylists()");
    response = await api.getUserPlaylists().then((data) => {
      return data.body;
    });

    for (const playlist of response.items) {
      if (playlist.name == name) {
        return playlist;
      }
    }
    // Default offset is 20
    offset += 20;
  } while (response.next);

  return await api
    .createPlaylist(name, {
      description:
        `The songs I listened to in ${currentMonth()}. ` +
        "Automatically generated by spotify-watch.",
      public: false,
    })
    .then((data) => {
      return data;
    });
};

const getAllPlaylistItems = async (api, pid) => {
  let response = null,
    offset = 0;

  const itemIds = [];
  do {
    console.log("getPlaylistTracks(", pid, ")");
    response = await api.getPlaylistTracks(pid, { offset }).then((data) => {
      data.body.items.forEach((item) => itemIds.push(item.track.uri));
      offset += 20;
      return data.body;
    });
  } while (response.next);

  return itemIds;
};

let currentPlaylist, currentPlaylistItems;

watcher.on("start", async ({ api }) => {
  currentPlaylist = await getCurrentPlaylist(api);
  console.log("Current playlist:", currentPlaylist.name);
  currentPlaylistItems = await getAllPlaylistItems(api, currentPlaylist.id);
  console.log("Tracklist contains", currentPlaylistItems.length, "tracks");
});

watcher.on("tick", async ({ _api }) => {
  // console.log("on:tick callback");
});

watcher.on("listen", async ({ api, item, device }) => {
  console.log("Now listening to", item.name, "on", device.name);
  if (currentPlaylistItems.indexOf(item.uri) != -1) {
    return;
  }
  currentPlaylistItems.push(item.uri);
  // console.log("addTracksToPlaylist(", currentPlaylist.id, item.uri, ")");
  await api.addTracksToPlaylist(currentPlaylist.id, [item.uri]);
});

await watcher.watch();
